import{_ as a,X as e,Y as s,Z as n}from"./framework-7c2c1cd4.js";const l={},r=n(`<h2 id="_1、like-关键字的左或者左右模糊查询无法走索引" tabindex="-1"><a class="header-anchor" href="#_1、like-关键字的左或者左右模糊查询无法走索引" aria-hidden="true">#</a> 1、like 关键字的左或者左右模糊查询无法走索引</h2><ul><li>索引B+树是按照索引值有序排列存储的，只能根据前缀进行比较。</li></ul><h2 id="_2、对索引字段使用函数-会导致索引失效" tabindex="-1"><a class="header-anchor" href="#_2、对索引字段使用函数-会导致索引失效" aria-hidden="true">#</a> 2、对索引字段使用函数，会导致索引失效</h2><ul><li>MySQL8.0 之后新增索引特性：函数索引——针对函数计算后的值建立索引。</li></ul><h2 id="_3、对索引进行表达式计算-会导师索引失效" tabindex="-1"><a class="header-anchor" href="#_3、对索引进行表达式计算-会导师索引失效" aria-hidden="true">#</a> 3、对索引进行表达式计算，会导师索引失效</h2><ul><li><p>该问题可以同队对 SQL 语句进行改造来避免。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment"># 不会走索引</span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t_user <span class="token keyword">where</span> id <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>

<span class="token comment"># sql 语句改造：具体情况具体分析</span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t_user <span class="token keyword">where</span> id <span class="token operator">=</span> <span class="token number">10</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="_4、索引的隐式类型转换" tabindex="-1"><a class="header-anchor" href="#_4、索引的隐式类型转换" aria-hidden="true">#</a> 4、索引的隐式类型转换</h2><ul><li>索引（字符串），参数（整型），会导致索引失效；【本质原因是对索隐裂使用了函数计算】</li><li>索引（整型），参数（字符串），不会导致索引失效；</li><li>原因：MySQL 在遇到字符串和整型比较大小时，会将字符串转换成整型。</li></ul><h2 id="_5、联合索引非最左匹配导致索引失效" tabindex="-1"><a class="header-anchor" href="#_5、联合索引非最左匹配导致索引失效" aria-hidden="true">#</a> 5、联合索引非最左匹配导致索引失效</h2><h2 id="_6、where-子句中的-or" tabindex="-1"><a class="header-anchor" href="#_6、where-子句中的-or" aria-hidden="true">#</a> 6、WHERE 子句中的 OR</h2><ul><li>OR 前的条件是索引列，OR 后的条件不是索引列，会导致索引失效。</li></ul>`,11),i=[r];function t(o,d){return e(),s("div",null,i)}const p=a(l,[["render",t],["__file","05_索引失效的情况.html.vue"]]);export{p as default};
