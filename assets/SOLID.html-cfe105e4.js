import{_ as i,X as l,Y as e,Z as a}from"./framework-7c2c1cd4.js";const r={},n=a('<h2 id="指导思想" tabindex="-1"><a class="header-anchor" href="#指导思想" aria-hidden="true">#</a> 指导思想</h2><ul><li>可维护性：Maintainablity <ul><li>修改功能，需要改动的地方越少，可维护性越好</li></ul></li><li>可复用性：Reusability <ul><li>代码可以被重复使用</li><li>写出自己总结的类库</li></ul></li><li>可扩展性：Extensibility / Scalability <ul><li>添加功能无需修改原来的代码</li></ul></li><li>灵活性：flexibility / mobility / adaptability <ul><li>代码接口可以灵活调用</li></ul></li></ul><h2 id="_1、单一职责原则" tabindex="-1"><a class="header-anchor" href="#_1、单一职责原则" aria-hidden="true">#</a> 1、单一职责原则</h2><ul><li>Single Responsibility Principle</li><li>一个类不要设计太大、太累，负责单一的职责</li><li>高内聚，低耦合</li></ul><h2 id="_2、开闭原则" tabindex="-1"><a class="header-anchor" href="#_2、开闭原则" aria-hidden="true">#</a> 2、开闭原则</h2><ul><li>Open Closed Principle</li><li>对扩展开放，对修改关闭 <ul><li>尽量不修改原来代码的前提下进行扩展</li></ul></li><li>抽象化，多台是开闭原则的关键</li></ul><h2 id="_3、里式替换原则" tabindex="-1"><a class="header-anchor" href="#_3、里式替换原则" aria-hidden="true">#</a> 3、里式替换原则</h2><ul><li>Liscov Substitution Principle</li><li>所有使用父类的地方，都必须能够透明的使用子类对象</li></ul><h2 id="_4、依赖倒置原则" tabindex="-1"><a class="header-anchor" href="#_4、依赖倒置原则" aria-hidden="true">#</a> 4、依赖倒置原则</h2><ul><li>Dependency Inversion Principle</li><li>依赖抽象，而不是依赖具体</li><li>面向抽象编程</li></ul><h2 id="_5、接口隔离原则" tabindex="-1"><a class="header-anchor" href="#_5、接口隔离原则" aria-hidden="true">#</a> 5、接口隔离原则</h2><ul><li>Interface Segregation Principle</li><li>每一个接口应该承担独立的角色，不干不该自己干的事 <ul><li>Flyable Runnable 不该合二为一</li><li>避免自雷实现不需要实现的方法</li><li>需要对客户提供接口的时候，只需要暴露最小的接口</li></ul></li></ul><h2 id="_6、迪米特法则" tabindex="-1"><a class="header-anchor" href="#_6、迪米特法则" aria-hidden="true">#</a> 6、迪米特法则</h2><ul><li>Law of Demeter</li><li>尽量不要和陌生人说话</li><li>在迪米特法则中，对于一个对象，非陌生人包括一下几个类 <ul><li>当前对象本身（this）</li><li>一参数形式传入到当前对象方法中的对象</li><li>当前对象的成员对象</li><li>如果当前对象的成员对象是一个集合，那么集合中的元素也都是朋友</li><li>当前对象所创建的对象</li></ul></li><li>和其他类的耦合度变低</li></ul>',14),t=[n];function h(d,u){return l(),e("div",null,t)}const s=i(r,[["render",h],["__file","SOLID.html.vue"]]);export{s as default};
