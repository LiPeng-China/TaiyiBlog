import{_ as n,X as a,Y as s,Z as t}from"./framework-7c2c1cd4.js";const e={},p=t(`<h2 id="_1、概述" tabindex="-1"><a class="header-anchor" href="#_1、概述" aria-hidden="true">#</a> 1、概述</h2><p>JDK8 中的一个语法糖，对某些匿名内部类的写法进行简化。</p><p>是函数式编程思想的一个重要体现，让我们不在关注是什么对象，而是更关注对数据进行了什么操作。</p><h2 id="_2、核心原则" tabindex="-1"><a class="header-anchor" href="#_2、核心原则" aria-hidden="true">#</a> 2、核心原则</h2><p>可推导可省略</p><h2 id="_3、基本格式" tabindex="-1"><a class="header-anchor" href="#_3、基本格式" aria-hidden="true">#</a> 3、基本格式</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token punctuation">(</span>参数列表<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>代码<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="举例-创建线程" tabindex="-1"><a class="header-anchor" href="#举例-创建线程" aria-hidden="true">#</a> 举例：创建线程</h3><p>匿名内部类写法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;你好&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Lambda 表达式写法【接口且只有一个抽象方法】</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;新线程中 run 方法被执行了。&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="省略规则" tabindex="-1"><a class="header-anchor" href="#省略规则" aria-hidden="true">#</a> 省略规则</h3><ul><li>参数类型可以省略</li><li>方法体中如果只有一句代码的时候，大括号、return、和唯一一句代码后面的分号</li><li>方法只有一个参数时，小括号也可以省略</li></ul>`,14),c=[p];function o(i,l){return a(),s("div",null,c)}const d=n(e,[["render",o],["__file","02_Lambda.html.vue"]]);export{d as default};
